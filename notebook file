{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "source": [
    "import tensorflow as tf\r\n",
    "from tensorflow.keras import datasets, layers, models\r\n",
    "import numpy as np\r\n",
    "import pandas as pd\r\n",
    "import matplotlib.pyplot as plt\r\n",
    "from tensorflow.keras.applications import MobileNetV2\r\n",
    "from PIL import Image\r\n",
    "import os\r\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\r\n",
    "from tensorflow.keras import mixed_precision"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "source": [
    "train_images = ImageDataGenerator(rescale = 1./255,validation_split=0.1,fill_mode='nearest')\r\n",
    "test_images = ImageDataGenerator(rescale = 1./255)\r\n",
    "training_set = train_images.flow_from_directory('data/Train',target_size = (32, 32),batch_size=64,subset='training',class_mode = 'categorical',color_mode='grayscale',shuffle=True)\r\n",
    "validation_set = train_images.flow_from_directory('data/Train',target_size = (32, 32),batch_size=64,subset='validation',class_mode = 'categorical',color_mode='grayscale',shuffle=True)\r\n",
    "test_set = test_images.flow_from_directory('data/Test',target_size = (32, 32),batch_size=1,class_mode = 'categorical',color_mode='grayscale',shuffle=True)"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Found 70380 images belonging to 46 classes.\n",
      "Found 7820 images belonging to 46 classes.\n",
      "Found 13800 images belonging to 46 classes.\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "source": [
    "model = models.Sequential()\r\n",
    "model.add(layers.GaussianNoise(0.1, input_shape=(32, 32,1)))\r\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.MaxPooling2D((2, 2)))\r\n",
    "model.add(tf.keras.layers.BatchNormalization())\r\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.MaxPooling2D((2, 2)))\r\n",
    "model.add(tf.keras.layers.BatchNormalization())\r\n",
    "model.add(layers.Conv2D(256, (3, 3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.MaxPooling2D((2, 2)))\r\n",
    "model.add(tf.keras.layers.BatchNormalization())\r\n",
    "model.add(layers.Flatten())\r\n",
    "model.add(layers.Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.Dropout(0.4))\r\n",
    "model.add(layers.Dense(128, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.Dropout(0.4))\r\n",
    "model.add(layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.0001), bias_regularizer=tf.keras.regularizers.l2(0.0001)))\r\n",
    "model.add(layers.Dropout(0.4))\r\n",
    "model.add(layers.Dense(46,activation='softmax'))"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "source": [
    "#model = MobileNetV2(input_shape=(32,32,3),weights=None)\r\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(0.001),loss='categorical_crossentropy',metrics=['accuracy'])"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "source": [
    "import datetime\r\n",
    "log_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\r\n",
    "tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\r\n"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "source": [
    "history = model.fit(training_set,validation_data=validation_set,epochs=20,callbacks=[tensorboard_callback])"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Epoch 1/20\n",
      "1100/1100 [==============================] - 51s 42ms/step - loss: 1.1474 - accuracy: 0.8342 - val_loss: 0.9854 - val_accuracy: 0.8505\n",
      "Epoch 2/20\n",
      "1100/1100 [==============================] - 26s 23ms/step - loss: 0.5673 - accuracy: 0.9500 - val_loss: 0.9080 - val_accuracy: 0.8425\n",
      "Epoch 3/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.4649 - accuracy: 0.9590 - val_loss: 0.7896 - val_accuracy: 0.8699\n",
      "Epoch 4/20\n",
      "1100/1100 [==============================] - 26s 23ms/step - loss: 0.4360 - accuracy: 0.9626 - val_loss: 0.6728 - val_accuracy: 0.8981\n",
      "Epoch 5/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.4250 - accuracy: 0.9646 - val_loss: 0.6842 - val_accuracy: 0.8895\n",
      "Epoch 6/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.4062 - accuracy: 0.9670 - val_loss: 0.7480 - val_accuracy: 0.8740\n",
      "Epoch 7/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3991 - accuracy: 0.9678 - val_loss: 0.7514 - val_accuracy: 0.8876\n",
      "Epoch 8/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3827 - accuracy: 0.9703 - val_loss: 0.7779 - val_accuracy: 0.8751\n",
      "Epoch 9/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3701 - accuracy: 0.9711 - val_loss: 0.6523 - val_accuracy: 0.9045\n",
      "Epoch 10/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3587 - accuracy: 0.9716 - val_loss: 0.6990 - val_accuracy: 0.8854\n",
      "Epoch 11/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3380 - accuracy: 0.9727 - val_loss: 0.5925 - val_accuracy: 0.9084\n",
      "Epoch 12/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3280 - accuracy: 0.9739 - val_loss: 0.6084 - val_accuracy: 0.9088\n",
      "Epoch 13/20\n",
      "1100/1100 [==============================] - 26s 23ms/step - loss: 0.3195 - accuracy: 0.9750 - val_loss: 0.5298 - val_accuracy: 0.9254\n",
      "Epoch 14/20\n",
      "1100/1100 [==============================] - 26s 24ms/step - loss: 0.3067 - accuracy: 0.9756 - val_loss: 0.4732 - val_accuracy: 0.9244\n",
      "Epoch 15/20\n",
      "1100/1100 [==============================] - 25s 23ms/step - loss: 0.3089 - accuracy: 0.9758 - val_loss: 0.5931 - val_accuracy: 0.9045\n",
      "Epoch 16/20\n",
      "1100/1100 [==============================] - 25s 22ms/step - loss: 0.2967 - accuracy: 0.9764 - val_loss: 0.5468 - val_accuracy: 0.9119\n",
      "Epoch 17/20\n",
      "1100/1100 [==============================] - 25s 22ms/step - loss: 0.2804 - accuracy: 0.9774 - val_loss: 0.6414 - val_accuracy: 0.8866\n",
      "Epoch 18/20\n",
      "1100/1100 [==============================] - 25s 22ms/step - loss: 0.2892 - accuracy: 0.9767 - val_loss: 0.5923 - val_accuracy: 0.9036\n",
      "Epoch 19/20\n",
      "1100/1100 [==============================] - 25s 22ms/step - loss: 0.2757 - accuracy: 0.9776 - val_loss: 0.7176 - val_accuracy: 0.8881\n",
      "Epoch 20/20\n",
      "1100/1100 [==============================] - 25s 22ms/step - loss: 0.2739 - accuracy: 0.9772 - val_loss: 0.5926 - val_accuracy: 0.8991\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "source": [
    "plt.plot(history.history['accuracy'], label='accuracy')\r\n",
    "plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\r\n",
    "plt.xlabel('Epoch')\r\n",
    "plt.ylabel('Accuracy')\r\n",
    "plt.ylim([0, 1])\r\n",
    "plt.legend(loc='lower right')"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x204e00db3c8>"
      ]
     },
     "metadata": {},
     "execution_count": 7
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "source": [
    "plt.plot(history.history['loss'], label='loss')\r\n",
    "plt.plot(history.history['val_loss'], label = 'val_loss')\r\n",
    "plt.xlabel('Epoch')\r\n",
    "plt.ylabel('loss')\r\n",
    "plt.ylim([0, 1])\r\n",
    "plt.legend(loc='lower right')"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x204e00a5508>"
      ]
     },
     "metadata": {},
     "execution_count": 8
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "source": [
    "test_loss, test_acc = model.evaluate(test_set)"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "13800/13800 [==============================] - 55s 4ms/step - loss: 0.3180 - accuracy: 0.9663\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "source": [
    "model.save('model.h5')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [],
   "outputs": [],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.7.9",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.9 64-bit"
  },
  "interpreter": {
   "hash": "9b480f749ce4ef3b2bb2dc91bb87ab66f696b937cd35ce6ca033d1d9ef37b676"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
